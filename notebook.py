# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UAcwlHoFj5_yem0omaTes21eso1fCojs
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# %matplotlib inline

"""# Load Dataset"""

dataset = pd.read_csv('dataset/UNTR.JK.csv')
dataset.head()

"""# Exploratory Data Analysis

#### Cek Deskripsi Statistik Data
"""

dataset.info()

dataset.describe()

dataset.shape

dataset.rename(columns={'Adj Close': 'Adj_close'}, inplace=True)

"""#### Check Missing Values"""

dataset.isnull().sum()

dataset = dataset.dropna()

"""#### Check Zero Value in Dataset"""

print("Nilai 0 di kolom Open ada: ", (dataset.Open == 0).sum())
print("Nilai 0 di kolom High ada: ", (dataset.High == 0).sum())
print("Nilai 0 di kolom Low ada: ", (dataset.Low == 0).sum())
print("Nilai 0 di kolom Close ada: ", (dataset.Close == 0).sum())
print("Nilai 0 di kolom Adj Close ada: ", (dataset.Adj_close == 0).sum())
print("Nilai 0 di kolom Volume ada: ", (dataset.Volume == 0).sum())

dataset = dataset[dataset.Volume != 0]

"""#### Check Outliers"""

sns.boxplot(x=dataset['Open'])

sns.boxplot(x=dataset['High'])

sns.boxplot(x=dataset['Low'])

sns.boxplot(x=dataset['Volume'])

"""#### Check Correlation"""

dataset.hist(bins=50, figsize=(10, 10))
plt.show()

sns.pairplot(dataset, diag_kind='kde')

plt.figure(figsize=(10, 8))
correlation_matrix = dataset.corr(numeric_only=True).round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

dataset.drop(['Volume', 'Adj_close'], axis=1, inplace=True)
dataset.head()

"""# Data Preparation

#### Sederhanakan Fitur dengan PCA
"""

sns.pairplot(dataset[['Open', 'High', 'Low']], plot_kws={'s':3})

pca = PCA(n_components=3, random_state=42)
pca.fit(dataset[['Open', 'High', 'Low']])
principalComponents = pca.transform(dataset[['Open', 'High', 'Low']])

pca.explained_variance_ratio_.round(3)

pca = PCA(n_components=1, random_state=42)
pca.fit(dataset[['Open', 'High', 'Low']])
dataset['pca'] = pca.transform(dataset.loc[:, ('Open', 'High', 'Low')]).flatten()
dataset.drop(['Open', 'High', 'Low'], axis=1, inplace=True)

dataset.head()

"""#### Split Data"""

X = dataset.drop(['Close', 'Date'], axis=1)
y = dataset['Close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""#### Scaling Data"""

scaler = StandardScaler()
X_train['pca'] = scaler.fit_transform(X_train)

X_train

"""# Model Development"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['LinearRegression', 'KNN', 'RandomForest', 'Boosting'])

"""#### Linear Regression"""

lr = LinearRegression()
lr.fit(X_train, y_train)

models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lr.predict(X_train), y_true=y_train)

"""#### KNN"""

knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)

models.loc['train_mse','KNN'] = mean_squared_error(y_pred=knn.predict(X_train), y_true=y_train)

"""#### Random Forest"""

rf = RandomForestRegressor(n_estimators=100, max_depth=5, random_state=42)
rf.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=rf.predict(X_train), y_true=y_train)

"""#### Adaptive Boosting"""

ada = AdaBoostRegressor(n_estimators=100, random_state=42)
ada.fit(X_train, y_train)

models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=ada.predict(X_train), y_true=y_train)

"""# Model Evaluation

#### Scaling Data Test
"""

X_test['pca'] = scaler.fit_transform(X_test)

"""#### MSE Dari Tiap Model"""

mse = pd.DataFrame(index=['train', 'test'],
                   columns=['LinearRegression', 'KNN', 'RandomForest', 'AdaptiveBoosting'])

model_dict = {'LinearRegression': lr, 'KNN': knn, 'RandomForest': rf, 'AdaptiveBoosting': ada}

for model_name, model in model_dict.items():
    mse.loc['train', model_name] = mean_squared_error(y_pred=model.predict(X_train), y_true=y_train)/1e3
    mse.loc['test', model_name] = mean_squared_error(y_pred=model.predict(X_test), y_true=y_test)/1e3

mse

"""#### Plot MSE"""

fig, ax = plt.subplots(figsize=(10, 8))
mse.plot(kind='bar', ax=ax)
ax.set_ylabel('MSE')

"""#### Prediction"""

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)